# Generated by Django 2.2.7 on 2019-11-24 07:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        # ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=20, verbose_name='姓名')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='出生日期')),
                ('gender', models.CharField(choices=[('male', '男'), ('famale', '女')], default='male', max_length=10, verbose_name='性别')),
                ('mobile', models.CharField(default='', max_length=11, verbose_name='电话')),
                ('email', models.EmailField(max_length=100, verbose_name='邮箱')),
                ('apikey', models.TextField(verbose_name='APIKEY')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='设备名称')),
                ('tags', models.CharField(blank=True, max_length=255, null=True, verbose_name='设备标签')),
                ('about', models.TextField(blank=True, null=True, verbose_name='设备描述')),
                ('locate', models.CharField(blank=True, max_length=255, null=True, verbose_name='设备位置')),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='创建时间')),
                ('last_active', models.DateTimeField(blank=True, null=True, verbose_name='更新时间')),
                ('status', models.IntegerField(choices=[(0, 0), (1, 1)], default=1, verbose_name='设备状态')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name': '设备',
                'verbose_name_plural': '设备',
            },
        ),
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='传感器类型')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='类型备注')),
                ('status', models.IntegerField(choices=[(0, 0), (1, 1)], default=1, verbose_name='类型状态')),
            ],
            options={
                'verbose_name': '传感器类型',
                'verbose_name_plural': '传感器类型',
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True, verbose_name='口令')),
                ('deadline', models.DateTimeField(verbose_name='有效时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户令牌',
                'verbose_name_plural': '用户令牌',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='传感器名称')),
                ('tags', models.TextField(blank=True, null=True, verbose_name='传感器标签')),
                ('desc', models.TextField(blank=True, null=True, verbose_name='传感器描述')),
                ('last_update', models.IntegerField(blank=True, null=True, verbose_name='上次数据时间')),
                ('last_data', models.TextField(blank=True, null=True, verbose_name='上次数据')),
                ('status', models.IntegerField(choices=[(0, 0), (1, 1)], default=1, verbose_name='传感器状态')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='iot.Device', verbose_name='所属设备')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='iot.SensorType', verbose_name='传感器类型')),
            ],
            options={
                'verbose_name': '传感器',
                'verbose_name_plural': '传感器',
            },
        ),
        migrations.CreateModel(
            name='Datapoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(verbose_name='传感器数据')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='测量时间')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='上传时间')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='iot.Sensor', verbose_name='所属传感器')),
            ],
            options={
                'verbose_name': '数据点',
                'verbose_name_plural': '数据点',
            },
        ),
    ]
